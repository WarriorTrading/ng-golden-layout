{"version":3,"sources":["webpack:///./dist/@warriortrading/ng-golden-layout/fesm2015/warriortrading-ng-golden-layout.js","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.module.ts","webpack:///./src/app/room/room.component.html","webpack:///./src/app/room/room.component.scss","webpack:///./src/app/room/room.component.ts","webpack:///./src/app/roomlist/roomlist.component.html","webpack:///./src/app/roomlist/roomlist.component.scss","webpack:///./src/app/roomlist/roomlist.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AACsK;AACrK;;AAE/C;AACA;AACA,cAAc,kDAAkD;AAChE;AACA;AACA,WAAW,EAAE;AACb,sCAAsC,4DAAc;;AAEpD;AACA;AACA,cAAc,kDAAkD;AAChE;AACA,WAAW,EAAE;AACb,mCAAmC,4DAAc;AACjD,WAAW,EAAE;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,kDAAkD;AAChE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT;AACA,yBAAyB,EAAE,kBAAkB,EAAE;AAC/C;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,2BAA2B,uCAAuC;AAClE,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,OAAO;AAChF;AACA;AACA,mBAAmB,EAAE;AACrB,kCAAkC,EAAE,mDAAmD,gBAAgB,cAAc,EAAE;AACvH;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,OAAO;AAChF;AACA;AACA,mBAAmB,EAAE;AACrB,oCAAoC,EAAE,mDAAmD,uDAAuD,cAAc,EAAE;AAChK;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,gDAAgD,OAAO,oDAAM,sCAAsC,GAAG;AAC3G,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,mCAAmC;AACzG;;AAEA;AACA;AACA,cAAc,kDAAkD;AAChE;AACA,WAAW,EAAE;AACb,kCAAkC,4DAAc;AAChD,WAAW,EAAE;AACb,uCAAuC,4DAAc;AACrD;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,YAAY,+DAAS;AACrB,kCAAkC,sCAAsC;AACxE;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,+DAAS;AACrB,gCAAgC,sCAAsC;AACtE,mBAAmB,EAAE;AACrB,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,+DAAS;AACrB,mCAAmC,sCAAsC;AACzE;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,+DAAS;AACrB,kCAAkC,sCAAsC;AACxE;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,uBAAuB,EAAE;AACzB,uCAAuC,EAAE;AACzC,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gCAAgC,0CAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,sDAAQ;AACvB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,yBAAyB,0CAAY;AACrC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;A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","file":"main.js","sourcesContent":["import * as GoldenLayout from 'golden-layout';\nimport { InjectionToken, Inject, Injectable, Optional, isDevMode, ComponentFactoryResolver, HostListener, ViewContainerRef, Component, ApplicationRef, NgZone, Injector, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\n/** @type {?} */\nconst GoldenLayoutConfiguration = new InjectionToken('GoldenLayoutConfiguration');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst GoldenLayoutStateStore = new InjectionToken('GoldenLayoutStateStore');\n/** @type {?} */\nconst DEFAULT_LOCAL_STORAGE_STATE_STORE_KEY = '$ng-golden-layout-state';\nclass LocalStorageStateStore {\n    /**\n     * @param {?} key\n     */\n    constructor(key) {\n        this.key = key;\n    }\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    writeState(state) {\n        localStorage.setItem(this.key, JSON.stringify(state));\n    }\n    /**\n     * @return {?}\n     */\n    loadState() {\n        /** @type {?} */\n        const state = localStorage.getItem(this.key);\n        return state\n            ? Promise.resolve(JSON.parse(state))\n            : Promise.reject(`No state found using key: ${this.key}`);\n    }\n}\n/**\n * @return {?}\n */\nfunction DEFAULT_LOCAL_STORAGE_STATE_STORE_FACTORY() {\n    return new LocalStorageStateStore(DEFAULT_LOCAL_STORAGE_STATE_STORE_KEY);\n}\n/** @type {?} */\nconst DEFAULT_LOCAL_STORAGE_STATE_STORE = new LocalStorageStateStore(DEFAULT_LOCAL_STORAGE_STATE_STORE_KEY);\n/** @type {?} */\nconst DEFAULT_LOCAL_STORAGE_STATE_STORE_PROVIDER = {\n    provide: GoldenLayoutStateStore,\n    useFactory: DEFAULT_LOCAL_STORAGE_STATE_STORE_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nclass GoldenLayoutService {\n    /**\n     * @param {?} config\n     * @param {?} stateStore\n     */\n    constructor(config, stateStore) {\n        this.config = config;\n        this.stateStore = stateStore;\n        this._layout = null;\n    }\n    /**\n     * @param {?} goldenLayout\n     * @param {?} componentInitCallbackFactory\n     * @return {?}\n     */\n    initialize(goldenLayout, componentInitCallbackFactory) {\n        this._layout = goldenLayout;\n        this.config.components.forEach((componentConfig) => {\n            /** @type {?} */\n            const componentInitCallback = componentInitCallbackFactory.createComponentInitCallback(componentConfig.component);\n            goldenLayout.registerComponent(componentConfig.componentName, componentInitCallback);\n        });\n        if (this.stateStore) {\n            ((/** @type {?} */ (((/** @type {?} */ (goldenLayout)))))).on('stateChanged', () => {\n                this._saveState(goldenLayout);\n            });\n        }\n    }\n    /**\n     * @param {?} goldenLayout\n     * @return {?}\n     */\n    _saveState(goldenLayout) {\n        if (this.stateStore && goldenLayout.isInitialised) {\n            try {\n                this.stateStore.writeState(goldenLayout.toConfig());\n            }\n            catch (ex) {\n                // Workaround for https://github.com/deepstreamIO/golden-layout/issues/192\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getState() {\n        if (this.stateStore) {\n            return this.stateStore.loadState().catch(() => {\n                return this.config.defaultLayout;\n            });\n        }\n        return Promise.resolve(this.config.defaultLayout);\n    }\n    /**\n     * @return {?}\n     */\n    getRegisteredComponents() {\n        return this.config.components;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getRegisteredComponent(name) {\n        for (let index = 0; index < this.config.components.length; index++) {\n            /** @type {?} */\n            const component = this.config.components[index];\n            if (component.componentName === name) {\n                return component;\n            }\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    childOfRoot() {\n        if (this._layout == null || this._layout.root == null || this._layout.root.contentItems == null || this._layout.root.contentItems.length === 0) {\n            throw new Error(\"no child in root \");\n        }\n        return this._layout.root.contentItems[0];\n    }\n    /**\n     * @param {?} parent\n     * @param {?=} opt\n     * @return {?}\n     */\n    addStack(parent, opt) {\n        if (parent == null) {\n            throw new Error(\"cannot add stack to null item\");\n        }\n        if (opt != null && opt.id != null && parent.getItemsById(opt.id).length > 0) {\n            throw new Error(`there already exists a item with same id: ${opt.id} in parent!`);\n        }\n        // create stack item\n        /** @type {?} */\n        const stack = (/** @type {?} */ (this._layout.createContentItem(Object.assign({ type: 'stack' }, (/** @type {?} */ (opt))))));\n        parent.addChild(stack);\n        return stack;\n    }\n    /**\n     * @param {?} parent\n     * @param {?} comp\n     * @param {?=} opt\n     * @return {?}\n     */\n    addComponent(parent, comp, opt) {\n        if (parent == null) {\n            throw new Error(\"cannot add component to null item\");\n        }\n        if (opt != null && opt.id != null && parent.getItemsById(opt.id).length > 0) {\n            throw new Error(`there already exists a item with same id: ${opt.id} in parent!`);\n        }\n        // create content item\n        /** @type {?} */\n        const content = (/** @type {?} */ (this._layout.createContentItem(Object.assign({ type: 'component', componentName: comp.componentName }, (/** @type {?} */ (opt))))));\n        parent.addChild(content);\n        return content;\n    }\n    /**\n     * @return {?}\n     */\n    currentConfig() {\n        return JSON.stringify(this._layout.toConfig(), null, 2);\n    }\n    /**\n     * @return {?}\n     */\n    isChildWindow() {\n        return !!window.opener;\n    }\n    /**\n     * @return {?}\n     */\n    getRootWindow() {\n        return window.opener || window;\n    }\n}\nGoldenLayoutService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nGoldenLayoutService.ctorParameters = () => [\n    { type: GoldenLayoutConfiguration, decorators: [{ type: Inject, args: [GoldenLayoutConfiguration,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GoldenLayoutStateStore,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst GoldenLayoutContainer = new InjectionToken('GoldenLayoutContainer');\n/** @type {?} */\nconst GoldenLayoutComponentState = new InjectionToken('GoldenLayoutComponentState');\n/**\n * Type guard which determines if a component implements the GlOnResize interface.\n * @param {?} obj\n * @return {?}\n */\nfunction implementsGlOnResize(obj) {\n    return typeof obj === 'object' && typeof obj.glOnResize === 'function';\n}\n/**\n * Type guard which determines if a component implements the GlOnShow interface.\n * @param {?} obj\n * @return {?}\n */\nfunction implementsGlOnShow(obj) {\n    return typeof obj === 'object' && typeof obj.glOnShow === 'function';\n}\n/**\n * Type guard which determines if a component implements the GlOnHide interface.\n * @param {?} obj\n * @return {?}\n */\nfunction implementsGlOnHide(obj) {\n    return typeof obj === 'object' && typeof obj.glOnHide === 'function';\n}\n/**\n * Type guard which determines if a component implements the GlOnTab interface.\n * @param {?} obj\n * @return {?}\n */\nfunction implementsGlOnTab(obj) {\n    return typeof obj === 'object' && typeof obj.glOnTab === 'function';\n}\nclass GoldenLayoutComponent {\n    /**\n     * @param {?} glService\n     * @param {?} viewContainer\n     * @param {?} appref\n     * @param {?} componentFactoryResolver\n     * @param {?} ngZone\n     * @param {?} injector\n     */\n    constructor(glService, viewContainer, appref, componentFactoryResolver, ngZone, injector) {\n        this.glService = glService;\n        this.viewContainer = viewContainer;\n        this.appref = appref;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.ngZone = ngZone;\n        this.injector = injector;\n        this.unloaded = false;\n        this.topWindow = glService.getRootWindow();\n        this.isChildWindow = glService.isChildWindow();\n        if (this.isChildWindow) {\n            window.document.title = window.document.URL;\n            ((/** @type {?} */ (console))).__log = console.log;\n            console.log = this.topWindow.console.log;\n        }\n        if (isDevMode())\n            console.log(`Create@${this.isChildWindow ? 'child' : 'root'}!`);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (isDevMode())\n            console.log(`Init@${this.isChildWindow ? 'child' : 'root'}!`);\n        /** @type {?} */\n        let anyWin = (/** @type {?} */ (this.topWindow));\n        if (!this.isChildWindow) {\n            anyWin.__apprefs = [];\n            anyWin.__injector = this.injector;\n        }\n        // attach the application reference to the root window, save the original 'tick' method\n        anyWin.__apprefs.push(this.appref);\n        ((/** @type {?} */ (this.appref))).__tick = this.appref.tick;\n        this.appref.tick = () => {\n            for (const ar of ((/** @type {?} */ (this.topWindow))).__apprefs) {\n                ar._zone.run(() => ar.__tick());\n            }\n        };\n        this.glService.getState().then((layout) => {\n            this._createLayout(layout);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (isDevMode())\n            console.log(`Destroy@${this.isChildWindow ? 'child' : 'root'}!`);\n        if (this.isChildWindow) {\n            console.log = ((/** @type {?} */ (console))).__log;\n        }\n        this.unloaded = true;\n        // restore the original tick method.\n        // this appens in two cases:\n        // either the window is closed, after that it's not important to restore the tick method\n        // or within the root window, where we HAVE to restore the original tick method\n        this.appref.tick = ((/** @type {?} */ (this.appref))).__tick;\n    }\n    /**\n     * @return {?}\n     */\n    unloadHandler() {\n        if (isDevMode())\n            console.log(`Unload@${this.isChildWindow ? 'child' : 'root'}`);\n        if (this.unloaded) {\n            return;\n        }\n        this.unloaded = true;\n        if (this.isChildWindow) { // if the top window is unloaded, the whole application is destroyed.\n            // if the top window is unloaded, the whole application is destroyed.\n            /** @type {?} */\n            const index = ((/** @type {?} */ (this.topWindow))).__apprefs.indexOf(this.appref);\n            ((/** @type {?} */ (this.topWindow))).__apprefs.splice(index, 1);\n        }\n    }\n    /**\n     * @param {?} layout\n     * @return {?}\n     */\n    _createLayout(layout) {\n        this.goldenLayout = new GoldenLayout(layout, $(this.el.nativeElement));\n        // Register all golden-layout components.\n        this.glService.initialize(this.goldenLayout, this);\n        // Initialize the layout.\n        this.goldenLayout.init();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onResize(event) {\n        if (this.goldenLayout) {\n            this.goldenLayout.updateSize();\n        }\n    }\n    /**\n     * @param {?} componentType\n     * @return {?}\n     */\n    createComponentInitCallback(componentType) {\n        // Can't use an ES6 lambda here, since it is not a constructor\n        /** @type {?} */\n        const self = this;\n        return function (container, componentState) {\n            self.ngZone.run(() => {\n                // Create an instance of the angular component.\n                /** @type {?} */\n                const factory = self.componentFactoryResolver.resolveComponentFactory(componentType);\n                /** @type {?} */\n                const injector = self._createComponentInjector(container, componentState);\n                /** @type {?} */\n                const componentRef = self.viewContainer.createComponent(factory, undefined, injector);\n                // Bind the new component to container's client DOM element.\n                container.getElement().append($(componentRef.location.nativeElement));\n                self._bindEventHooks(container, componentRef.instance);\n                container.on('destroy', () => {\n                    $(componentRef.location.nativeElement).remove();\n                    componentRef.destroy();\n                });\n            });\n        };\n    }\n    /**\n     * Creates an injector capable of injecting the GoldenLayout object,\n     * component container, and initial component state.\n     * @param {?} container\n     * @param {?} componentState\n     * @return {?}\n     */\n    _createComponentInjector(container, componentState) {\n        return Injector.create([\n            {\n                provide: GoldenLayoutContainer,\n                useValue: container\n            },\n            {\n                provide: GoldenLayoutComponentState,\n                useValue: componentState\n            },\n            {\n                provide: GoldenLayout,\n                useValue: this.goldenLayout\n            },\n        ], this.injector);\n    }\n    /**\n     * Registers an event handler for each implemented hook.\n     * @param {?} container Golden Layout component container.\n     * @param {?} component Angular component instance.\n     * @return {?}\n     */\n    _bindEventHooks(container, component) {\n        if (implementsGlOnResize(component)) {\n            container.on('resize', () => {\n                component.glOnResize();\n            });\n        }\n        if (implementsGlOnShow(component)) {\n            container.on('show', () => {\n                component.glOnShow();\n            });\n        }\n        if (implementsGlOnHide(component)) {\n            container.on('hide', () => {\n                component.glOnHide();\n            });\n        }\n        if (implementsGlOnTab(component)) {\n            container.on('tab', (tab) => {\n                component.glOnTab(tab);\n            });\n        }\n    }\n}\nGoldenLayoutComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'golden-layout-root',\n                template: `<div class=\"ng-golden-layout-root\" #glroot></div>`,\n                styles: [`\n    .ng-golden-layout-root {\n      width:100%;\n      height:100%;\n    }`]\n            }] }\n];\n/** @nocollapse */\nGoldenLayoutComponent.ctorParameters = () => [\n    { type: GoldenLayoutService },\n    { type: ViewContainerRef },\n    { type: ApplicationRef },\n    { type: ComponentFactoryResolver },\n    { type: NgZone },\n    { type: Injector }\n];\nGoldenLayoutComponent.propDecorators = {\n    el: [{ type: ViewChild, args: ['glroot',] }],\n    unloadHandler: [{ type: HostListener, args: ['window:beforeunload',] }],\n    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nclass GoldenLayoutModule {\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    static forRoot(config) {\n        return {\n            ngModule: GoldenLayoutModule,\n            providers: [\n                GoldenLayoutService,\n                { provide: GoldenLayoutConfiguration, useValue: config }\n            ]\n        };\n    }\n}\nGoldenLayoutModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [GoldenLayoutComponent],\n                exports: [GoldenLayoutComponent],\n                imports: [CommonModule]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction MultiWindowInit() {\n    if (!window.opener) {\n        ((/** @type {?} */ (window))).__services = new ((/** @type {?} */ (window))).Map();\n        ((/** @type {?} */ (window))).__serviceConstructors = new ((/** @type {?} */ (window))).Map();\n    }\n}\n/**\n * @template T\n * @return {?}\n */\nfunction MultiWindowService() {\n    return function (constructor) {\n        /** @type {?} */\n        const constr = (/** @type {?} */ (constructor));\n        return (/** @type {?} */ (((/** @type {?} */ ((function (...args) {\n            /** @type {?} */\n            const rootWindow = (/** @type {?} */ ((window.opener || window)));\n            /** @type {?} */\n            const hasInstance = rootWindow.__services.has(constr.name);\n            if (!hasInstance) {\n                /** @type {?} */\n                const storedConstr = rootWindow.__serviceConstructors.get(constr.name) || constr;\n                rootWindow.__services.set(constr.name, new storedConstr(...args));\n            }\n            return rootWindow.__services.get(constr.name);\n        }))))));\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\nexport { GoldenLayoutConfiguration, GoldenLayoutContainer, GoldenLayoutComponentState, GoldenLayoutComponent, GoldenLayoutService, GoldenLayoutModule, DEFAULT_LOCAL_STORAGE_STATE_STORE_FACTORY, GoldenLayoutStateStore, DEFAULT_LOCAL_STORAGE_STATE_STORE_KEY, LocalStorageStateStore, DEFAULT_LOCAL_STORAGE_STATE_STORE, DEFAULT_LOCAL_STORAGE_STATE_STORE_PROVIDER, MultiWindowInit, MultiWindowService };\n\n//# sourceMappingURL=warriortrading-ng-golden-layout.js.map","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule, Component, Injectable } from '@angular/core';\nimport * as $ from 'jquery';\nimport {\n  GoldenLayoutModule,\n  GoldenLayoutService,\n  GoldenLayoutConfiguration,\n  MultiWindowService,\n} from '@warriortrading/ng-golden-layout';\nimport { RoomlistComponent } from './roomlist/roomlist.component';\nimport { RoomComponent } from './room/room.component';\n\n@Component({\n  template: `<div class=\"spawn-new\"></div><golden-layout-root></golden-layout-root>`,\n  selector: `app-root`,\n})\nexport class RootComponent {\n  constructor() {\n  }\n}\n\nconst config: GoldenLayoutConfiguration = {\n  components: [\n    {\n      component: RoomlistComponent,\n      componentName: 'roomlist',\n    },\n    {\n      component: RoomComponent,\n      componentName: 'room',\n    }\n  ],\n  defaultLayout: {\n    content: [\n      {\n        type: \"row\",\n        isClosable: false,\n        content: [\n          {\n            type: 'component',\n            componentName: 'roomlist',\n            id: \"app-roomlist\",\n            title: 'roomlist'\n          }\n        ]\n      }\n    ]\n  }\n}\n\n@NgModule({\n  declarations: [RootComponent, RoomlistComponent, RoomComponent],\n  entryComponents: [RoomlistComponent, RoomComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    GoldenLayoutModule.forRoot(config),\n  ],\n  providers: [GoldenLayoutService],\n  bootstrap: [RootComponent]\n})\nexport class AppModule { }\n","module.exports = \"<p>\\n  room inited at {{ createdTime }}\\n</p>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Jvb20vcm9vbS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-room',\n  templateUrl: './room.component.html',\n  styleUrls: ['./room.component.scss']\n})\nexport class RoomComponent implements OnInit {\n  createdTime: Date;\n  constructor() {\n    this.createdTime = new Date()\n  }\n\n  ngOnInit() {\n    console.info(`Room inited at ${this.createdTime}`)\n  }\n\n  ngOnDestroy() {\n    console.info(`Will destroy room inited at ${this.createdTime}`)\n  }\n}\n","module.exports = \"<div>\\n  roomlist works!\\n  <ul>\\n    <li (click)=\\\"openRoom(1)\\\">\\n      <div>room01</div>\\n    </li>\\n  </ul>\\n  <ul>\\n    <li (click)=\\\"openRoom(2)\\\">\\n      <div>room02</div>\\n    </li>\\n  </ul>\\n  <ul>\\n    <li (click)=\\\"openRoom(3)\\\">\\n      <div>room03</div>\\n    </li>\\n  </ul>\\n\\n  <ul>\\n    <li (click)=\\\"debugGL()\\\">\\n      <div>LogGLConfig</div>\\n    </li>\\n  </ul>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Jvb21saXN0L3Jvb21saXN0LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\nimport {\n  GoldenLayoutModule,\n  GoldenLayoutService,\n  GoldenLayoutConfiguration,\n  MultiWindowService,\n} from '@warriortrading/ng-golden-layout';\n\nimport { RoomComponent } from '../room/room.component';\n\n@Component({\n  selector: 'app-roomlist',\n  templateUrl: './roomlist.component.html',\n  styleUrls: ['./roomlist.component.scss']\n})\n\n\nexport class RoomlistComponent implements OnInit {\n  constructor(private srv: GoldenLayoutService) { }\n\n  openRoom(roomId: number) {\n    const stackOpt = {\n      type: 'stack',\n      id: 'stack-room-' + roomId,\n    }\n    const componentOpt = {\n      type: 'component',\n      id: 'room-' + roomId,\n      title: \"room-\" + roomId\n    }\n\n    const stack = this.srv.addStack(this.srv.childOfRoot(), stackOpt);\n    this.srv.addComponent(stack, this.srv.getRegisteredComponent('room'), componentOpt);\n  }\n\n  debugGL() {\n    console.log(this.srv.currentConfig());\n  }\n\n  ngOnInit() {\n  }\n\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { MultiWindowInit } from '@warriortrading/ng-golden-layout';\nimport * as $ from 'jquery';\n\n\nif (environment.production) {\n  enableProdMode();\n}\nMultiWindowInit();\nwindow['$'] = $;\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}